@using System.Security.Claims
@using YA.Archive.Infrastructure.Infrastructure.Permission
@using YA.Archive.MVC2.Models
@using YA.Archive.MVC2.Models.User

@{
    ViewBag.Title = "Users";
}
@Html.Partial("_SiteMap", ViewData["UsersSiteMap"])
@*@Html.Partial("_SearchUser")*@
@(Html.Kendo().Grid<User>().Name("users")
    .DataSource(dataSource => dataSource
        .Ajax()
        .Events(events =>
        {
            events.Error("error_handler");
            events.RequestEnd("onRequestEnd");

        })
        .Model(model => model.Id(m => m.Id))
            .Read(read => read.Action("Read", "Users").Data("usersReadData"))
            .Update(up => up.Action("Update", "Users"))
             .Create(update => update.Action("Create", "Users"))
              .Destroy(update => update.Action("Delete", "Users"))
    )

    .Columns(columns =>
    {
    columns.Template(@<text></text>).ClientTemplate("<input type='checkbox'  class='checkbox'/>").Title("<input type='checkbox'/>")
                                     .Width(10).Title("Select").HtmlAttributes(new
                                     {
                                         @onclick = "click",
                                         style = "align:center;float:none;text-align:center; font-size:12px; vertical-align: middle;"
                                     })
                                         .HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal; text-align:center; " });
        columns.Template(t => { }).Title("Row No").ClientTemplate("#= renderNumber(data) #").Hidden(true);
        columns.Template(t => { }).Title("Number").ClientTemplate("#= renderRecordNumber(data) #");
        columns.Bound(p => p.Id).Sortable(false).Visible(false);

        columns.Bound(p => p.UserName).Title("User Name").Width(200);
        ;
        columns.Bound(p => p.Password).Hidden().Title("Password").Width(200);
        ;
        if (Request.IsAuthenticated && !User.IsInRole(RolesT.MainCenter))
        {
            columns.ForeignKey(p => p.ClientCenterId, (System.Collections.IEnumerable) ViewData["ClientCenters"], "Id", "Name").Title("Center Name")
                .Hidden();
        }
        else
        {
            columns.ForeignKey(p => p.ClientCenterId, (System.Collections.IEnumerable)ViewData["ClientCenters"], "Id", "Name").Title("Center Name")
              .Width(100);
        }
        columns.Bound(x => x.Groups).ClientTemplate("#= renderMultiSelectText(data.Groups) #")
        .EditorTemplateName("GroupsEditor");
        if(Request.IsAuthenticated && (User.IsInRole(RolesT.Administrators) || User.IsInRole(RolesT.AdminClient)))
        {
            columns.Command(command => command.Custom("System Access").Click("showPermission")).Title("System Access");
        }
        //columns.Template(x => { }).ClientTemplate(
        //                 "<a class='k-button' href='" +
        //                 Url.Action("bb", "Users") +
        //                 "?UserName=#= UserName #'" +
        //                 ">Select</a>"
        //                 );

        columns.Command(command =>
        {
            if (((ClaimsIdentity)User.Identity).HasClaim("User", "CanEditUser"))
                //    if (CUser.User().ClaimsG != null)
                //        if (CUser.User().ClaimsG.Any(
                //c => c.ClaimType == "User" && c.ClaimValue == "CanEditUser"))
                command.Edit().Text("Edit")
                    .UpdateText("Ok")
                    .CancelText("Cancel");

            //    if (CUser.User().ClaimsG != null)
            //        if (CUser.User().ClaimsG.Any(
            //c => c.ClaimType == "User" && c.ClaimValue == "CanDeleteUser"))
            //command.Destroy().Text("Delete");


        }); 
        if (((ClaimsIdentity)User.Identity).HasClaim("User", "CanDeleteUser"))
            columns.Command(c => c.Custom("Custom Delete").Text("Delete<span class='k-icon k-delete'></span>").Click("customDelete").
                 //HtmlAttributes(new {style= "background-color: darksalmon; width: 100px;background-image:~/Content/img/logo.png;",
                 //    @class ="k-button k-button-icontext k-grid-delete k-icon k-delete"
                 //}));
                 HtmlAttributes(new
                 {
                     style = "background:darksalmon",

                 }));


    })
    .ToolBar(toolbar =>
    {
    toolbar.Template(@<text>
                                      <div class="toolbar" style="float: left">
                                          @if (((ClaimsIdentity) User.Identity).HasClaim("User", "CanCreateUser"))
                                          {
                                              <a class="k-button k-button-icontext k-grid-add" href="#">
                                                  <i class=""></i> Add a New User
                                              </a>
                                          }
                                          @if (((ClaimsIdentity)User.Identity).HasClaim("User", "CanDeleteUser")) { 
                                          <a style='margin-left: 10px; background-color: lightsteelblue;'
                                             class='k-button k-button-icontext' id="actionButton" href='#'>
                                              &nbsp; &nbsp; Delete &nbsp;&nbsp;
                                          </a>}
                                          <a style='margin-left: 10px; background-color: lightsteelblue;' class='k-button k-button-icontext' onclick='searchCommand()' href='#'>
                                              &nbsp; &nbsp; Search &nbsp;&nbsp;
                                          </a>
                                          <div id="divt"> @Html.Partial("_SearchUser") </div>
                                          
                                      </div>
                                   </text>);
             })
     //.ToolBar(toolbar =>
     //{

     //        //{
     //        //if (CUser.User().ClaimsG != null)
     //        //    if (CUser.User().ClaimsG.Any(
     //        //c => c.ClaimType == "User" && c.ClaimValue == "CanCreateUser"))
     //        toolbar.Create().Text("Add New Item");

     //    //}

     //})

     .Pageable(pager => pager
              .Messages(messages => messages.Display("{0} to {1} . Total {2}")).Messages(messages => messages.Empty("No information has been registered")))

    .Events(e =>
    {
        e.Edit("onEdit");
        e.DataBound("onDataBound");
    })
    .Sortable()
    .Editable(editable =>
    {
        editable.Mode(GridEditMode.PopUp).Window(w => w.Width(500).Title("")).TemplateName("User");
        editable.DisplayDeleteConfirmation(false);
        //  editable.DisplayDeleteConfirmation("Your Message here");

    })
)


<script type="text/javascript">
    function searchCommand() {
        $("#divt").toggle("slow");
    }
    $(document).ready(function() {
        $("#divt").toggle("9999999");
    });
    var rowNumber = 0;

    function renderNumber(data) {
        return ++rowNumber;
    }
    function renderRecordNumber(data) {
        var page = parseInt($("#users").data("kendoGrid").dataSource.page()) - 1;
        var pagesize = $("#users").data("kendoGrid").dataSource.pageSize();
        return parseInt(rowNumber + (parseInt(page) * parseInt(pagesize)));
    }
    function onDataBound(e) {
        rowNumber = 0;
        if (ss == true) {
            if (!e.sender.dataSource.view().length) {
                //var colspan = e.sender.thead.find("th:visible").length, emptyRow = '<tr><td colspan="' + colspan + '">No Records Found</td></tr>';
                //e.sender.tbody.parent().width(e.sender.thead.width()).end().html(emptyRow);
                Lobibox.notify('info', {
                    title: 'Search',
                    msg: "There are no items to display",
                    position: 'bottom left',
                });
            } else {
                Lobibox.notify('success', {
                    title: 'Search',
                    msg: "Search was done successfully.",
                    position: 'bottom left',
                });
            }
        }
        ss = false;
    }
    function onEdit(e) {

        $('[name="Id"]').attr("Hidden", true);
        if (e.model.isNew()) {

            $("#grid tbody [data-role=dropdownlist]").each(function() {
                var ddl = $(this).data("kendoDropDownList");
                if (ddl) {
                    ddl.options.optionLabel = "Select";
                    ddl.refresh();
                    ddl.value("");
                }
            });
        } else {
              $('[name="ClientCenterId"]').attr("Hidden", true);
$('label[for="' + $("#ClientCenterId").attr('id') + '"]').remove();
          $('[name="ClientCenterId"]').attr("Hidden", true);
             $('[data-valmsg-for="ClientCenterId"]').remove();
           $('[aria-owns="ClientCenterId_listbox"]').parent('div').remove();
             var labelEditCommentLockDate3 = $("label[for='" + $("#ClientCenterId").attr('id') + "']");
           $(labelEditCommentLockDate3).remove();
 $('[name="ClientCenterId"]').parent('div').remove();
 $('[name="ClientCenterId"]').remove();
$('label[for="' + $("#ClientCenterId").attr('id') + '"]').parent('div').remove();
$('label[for="' + $("#ClientCenterId").attr('id') + '"]').remove();
 var labelRemoveCommentLockDate3 = $("label[for='" + $("#ClientCenterId").attr('id') + "']");

   $('label[for="' + $("#ClientCenterId").attr('id') + '"]').parent('div').remove();
            //labelId.parent().attr('id')
$(labelRemoveCommentLockDate3).remove();
        }
        //$("#SUserName").val($("#UserName").val());
        $("#SUserName").val("");
        $("#SClientCenterId").val("");
        $("#SGroups").val("");
        e.container.find(".k-grid-update").on("click", function (e) {
            //$("#SUserName").val($("#UserName").val());
            $("#SClientCenterId").val("");
            $("#SGroups").val("");
        });
    }

</script>

<script type="text/javascript">
    function onRequestEnd(e) {
        if (e.type == "create" && !e.response.Errors) {
            if (e.response == null || e.response.Errors == null) {
                setTimeout(function myfunction() {
                    //popupNotification.show("Hey thekjjjjre!", "injjjjfo");
                    Lobibox.alert('success', {
                        msg: "Ok. done successfully",
                        title: "successful",
                        buttons: {
                            ok: {
                                text:"Ok",
                                'class': 'btn btn-success bthwidth',
                            }}
                    });
                   
                    //  $("#SName").val("");
              
                   
                    //$("#users").data("kendoGrid").dataSource.read();
                    $("#SUserName").val("");
                    $("#SClientCenterId").val("");
                    $("#SGroups").val("");
                }, 1000);
                --rowNumber; --rowNumber; --rowNumber; --rowNumber;
            }
        }
        else if (e.type == "destroy" && !e.response.Errors) {
            if (e.response == null || e.response.Errors == null) {
                setTimeout(function myfunction() {
                    Lobibox.alert('success', {
                        msg: "Delete was done successfully.",
                        title: "successful",
                        buttons: {
                            ok: {
                                text: "Ok",
                                'class': 'btn btn-success bthwidth',
                            }
                        }
                    });
                    //$("#grid").data("kendoGrid").dataSource.read();
                }, 1000);
            }
        }
        else if (e.type == "update"  && !e.response.Errors) {
            if (e.response == null || e.response.Errors == null) {
                setTimeout(function myfunction() {
                    Lobibox.alert('success', {
                        msg: "Edit was done successfully.",
                        title: "successful",
                        buttons: {
                            ok: {
                                text: "Ok",
                                'class': 'btn btn-success bthwidth',
                            }
                        }
                    });
                    //$("#users").data("kendoGrid").dataSource.read();
                    $("#SName").val("");
                    $("#SClientCenterId").val("");
                    $("#SGroups").val("");
                }, 1000);
                --rowNumber;
            }
        }
        //  alert("kjhgfdfghgfgdffdfgfffffffffffffffff");
    }


</script>
<script type="text/javascript">
    function onGridDataSourceRequestEnd(e) {
        Lobibox.alert('success', {
            msg: "htgfd grfvd ........."
        });
        if (e.type == "update" || e.type == "create") {
            // this.read();
        }
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "Error :\n";
            $.each(e.errors, function(key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function() {
                        message += this + "\n";
                        @* LoadAjaxContent("Users/Index");*@
                        //window.location.href = "@Url.Action("Index", "Users")";
                    });
                }
            });
            e.sender.read();
            e.sender._destroyed = [];
            Lobibox.alert('error', {
                msg: message,
                title: "Error!",
                buttons: {
                    ok: {
                        text: "Close",
                        'class': 'btn btn-danger bthwidth',
                    }
                }
            });
            $("#users").data("kendoGrid").dataSource.read();
        }
    }


</script>
<script>
    var ss = false;
    var IsClickSearch = false;
    $("#btnSearchT").click(function (e) {
        e.preventDefault();
        $("#divt").toggle("slow");

    });
    $("#btnSearch").click(function (e) {
        e.preventDefault();
        ss = true;
        IsClickSearch = true;
        $("#users").data("kendoGrid").dataSource.read();
        IsClickSearch = false;
        $("#divt").toggle("slow");
   

    });

    function usersReadData() {
        return {
            //SClientCenterId: $("#SClientCenterId").find(":selected").val(),
            sIsClickSearch: IsClickSearch,
            sStartDate: $("#SStartDate").val(),
            //sEndDate: $("#SEndDate").val(),
            sUserName: $("#SUserName").val(),
            sClientCenterId: $("#SClientCenterId").val(),
            sGroups: $("#SGroups").val(),
            @*isbackUU : '@TempData["isbackUU"]',*@
        };
    }
</script>

<script>
    function renderMultiSelectText(selectListArray) {
        if (selectListArray != undefined && selectListArray[0] != undefined) {

            var displayText;
            $.each(selectListArray, function(index) {
                if (displayText == undefined)
                    displayText = selectListArray[index].Name + " ,";
                else
                    displayText = displayText + selectListArray[index].Name + " ,";
            });
            return displayText.slice(0, -2);
        } else
            return "";
    }


    function showPermission(e) {
        e.preventDefault();
        var d = this.dataItem($(e.currentTarget).closest("tr"));

        window.location.href = "@Url.Action("Index", "Permission")?userId=" + d.Id;
        //  window.location.href =  "#/ClientCenter/Index" / ;
        // LoadAjaxContent("PermissionGroup/Index2");
        // LoadAjaxContent("PermissionGroup/Index2?groupId="+d.Id);
    }



    $("#actionButton").click(function () {
        var idsToSend = [];
        var dd = "";
        var grid = $("#users").data("kendoGrid");
        var ds = grid.dataSource.view();

        for (var i = 0; i < ds.length; i++) {
            var row = grid.table.find("tr[data-uid='" + ds[i].uid + "']");
            var checkbox = $(row).find(".checkbox");
            if (checkbox.is(":checked")) {
                idsToSend.push(ds[i].Id);

            }
        }
        dd = idsToSend.toString();
        //alert(dd);
        $.ajax({
            url: '@Url.Action("MultiDelete", "Users")',
            type: "Post",
            data: { Ids: dd },
            dataType: 'json',
            success: function (result) {
                if (result.IsSuccess) {
                    Lobibox.alert('success', {
                        msg: result.Message,
                        title: "successful",
                        buttons: {
                            ok: {
                                text: "Ok",
                                'class': 'btn btn-success bthwidth',
                            }
                        }
                    });
                } else {
                    Lobibox.alert('error', {
                        msg: result.Message,
                        title: "Error!",
                        buttons: {
                            ok: {
                                text: "Close",
                                'class': 'btn btn-danger bthwidth',
                            }
                        }
                    });
                }
                $("#users").data("kendoGrid").dataSource.read();
            }
        });
        //this obviously won't work , but just to illustrate the point.          
        $.post("/whatever", { ids: idsToSend });
    });
</script>